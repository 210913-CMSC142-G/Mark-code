import sys
import math
import queue
# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

class nood
    def __init__(self,exit,kids)
        self.exit=exit
        self.kids=kids
# n the total number of nodes in the level, including the gateways
# l the number of links
# e the number of exit gateways
noods = []
a = 0 
b = 0
n, l, e = [int(i) for i in input().split()]
Q = queue.Queue(n)

for i in range(n)
    noods.append(nood(False,[]))

for i in range(l)
    # n1 N1 and N2 defines a link between these nodes
    n1, n2 = [int(j) for j in input().split()]
    noods[n1].kids.append(n2)

    
for i in range(e)
    ei = int(input())  # the index of a gateway node
    noods[ei].exit = True

def bfs(si,noods,Q,parent=0)
    if(noods[si].exit==True)
        noods[parent].kids.remove(si)
        return parent, si
    else
        for i in range(len(noods[si].kids))
            Q.put(noods[si].kids[i])
        parent = si
        si = Q.get()
        a,b = bfs(si,noods,Q,parent)
        return a,b
# game loop
while True
    si = int(input())  # The index of the node on which the Bobnet agent is positioned this turn

    # Write an action using print
    # To debug print(Debug messages..., file=sys.stderr, flush=True)
    a,b = bfs(si,noods,Q)
    
    # Example 0 1 are the indices of the nodes you wish to sever the link between
    print(str(a)+ +str(b))
    while (Q.empty() == False)
        q = Q.get()
